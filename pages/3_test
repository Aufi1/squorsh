import streamlit as st
import pandas as pd
import numpy as np
import altair as alt

st.write("test")
# Use the sample data you provided in the prompt
sample_data = """match_number_total,match_number_day,Player1,Score1,Player2,Score2,date
1,1,Simon,11,Friedemann,8,20230803
2,2,Simon,11,Lucas,2,20230803
3,3,Lucas,11,Friedemann,4,20230803
4,4,Simon,10,Friedemann,12,20230803
5,5,Simon,11,Lucas,7,20230803
6,6,Lucas,11,Friedemann,9,20230803
7,7,Simon,11,Friedemann,6,20230803
8,8,Simon,11,Lucas,8,20230803
9,9,Lucas,15,Friedemann,13,20230803
10,10,Simon,11,Friedemann,9,20230803
11,11,Simon,12,Lucas,10,20230803
12,12,Lucas,5,Friedemann,11,20230803
13,13,Simon,4,Friedemann,11,20230803
14,14,Simon,11,Lucas,2,20230803
15,15,Lucas,4,Friedemann,11,20230803
16,16,Friedemann,13,Simon,11,20230803
17,17,Lucas,11,Friedemann,7,20230803
18,1,Simon,12,Friedemann,10,20230817
19,2,Lucas,7,Friedemann,11,20230817
20,3,Lucas,11,Simon,9,20230817
21,4,Simon,4,Friedemann,11,20230817
22,5,Lucas,11,Friedemann,4,20230817
23,6,Lucas,11,Simon,5,20230817
24,7,Simon,11,Friedemann,13,20230817
25,8,Lucas,11,Friedemann,4,20230817
26,9,Lucas,13,Simon,11,20230817
27,10,Simon,11,Friedemann,5,20230817
28,11,Lucas,11,Friedemann,7,20230817
29,12,Simon,11,Lucas,6,20230817
30,13,Simon,11,Friedemann,3,20230817
31,14,Lucas,11,Friedemann,5,20230817
32,15,Simon,12,Lucas,10,20230817
33,16,Lucas,10,Friedemann,12,20230817
34,17,Simon,11,Friedemann,8,20230817
35,1,Lucas,11,Friedemann,9,20230821
36,2,Lucas,11,Simon,7,20230821
37,3,Simon,11,Lucas,9,20230821
38,4,Friedemann,8,Simon,11,20230821
39,5,Friedemann,2,Lucas,11,20230821
40,6,Lucas,11,Simon,5,20230821
41,7,Friedemann,12,Simon,10,20230821
42,8,Lucas,12,Friedemann,10,20230821
43,9,Lucas,11,Simon,2,20230821
44,10,Simon,11,Friedemann,3,20230821
45,11,Lucas,11,Friedemann,6,20230821
46,12,Simon,11,Lucas,9,20230821
47,13,Simon,12,Friedemann,10,20230821
48,14,Lucas,11,Friedemann,7,20230821
49,15,Simon,11,Friedemann,8,20230821
50,16,Lucas,11,Friedemann,6,20230821
51,1,Lucas,11,Friedemann,13,20230907
52,2,Simon,11,Friedemann,9,20230907
53,3,Simon,11,Lucas,6,20230907
54,4,Friedemann,7,Lucas,11,20230907
55,5,Simon,11,Friedemann,8,20230907
56,6,Simon,11,Lucas,8,20230907
57,7,Lucas,12,Friedemann,10,20230907
58,8,Simon,11,Friedemann,5,20230907
59,9,Simon,12,Lucas,10,20230907
60,10,Friedemann,12,Lucas,10,20230907
61,11,Simon,13,Friedemann,15,20230907
62,12,Lucas,6,Simon,11,20230907
63,1,Friedemann,11,Lucas,9,20231017
64,2,Lucas,11,Simon,6,20231017
65,3,Simon,11,Friedemann,9,20231017
66,4,Friedemann,11,Lucas,4,20231017
67,5,Simon,11,Lucas,2,20231017
68,6,Friedemann,11,Simon,5,20231017
69,7,Tobias,11,Lucas,5,20231017
70,8,Tobias,11,Friedemann,5,20231017
71,9,Tobias,11,Simon,2,20231017
72,10,Lucas,11,Friedemann,6,20231017
73,11,Simon,11,Friedemann,9,20231017
74,12,Lucas,13,Simon,11,20231017
75,13,Lucas,11,Friedemann,7,20231017
76,14,Simon,11,Friedemann,9,20231017
77,15,Lucas,10,Simon,12,20231017
78,16,Friedemann,11,Lucas,7,20231017
79,17,Simon,12,Friedemann,10,20231017
80,18,Simon,11,Lucas,9,20231017
81,19,Friedemann,11,Lucas,1,20231017
82,20,Simon,11,Friedemann,9,20231017
83,21,Simon,11,Friedemann,8,20231017
84,1,Simon,16,Friedemann,18,20231108
85,2,Lucas,6,Friedemann,11,20231108
86,3,Lucas,11,Peter,9,20231108
87,4,Simon,11,Lucas,9,20231108
88,5,Simon,11,Peter,4,20231108
89,6,Friedemann,11,Peter,5,20231108
90,7,Simon,6,Friedemann,11,20231108
91,8,Peter,11,Lucas,9,20231108
92,9,Friedemann,11,Lucas,8,20231108
93,10,Lucas,12,Simon,10,20231108
94,11,Friedemann,11,Peter,3,20231108
95,1,Lucas,11,Simon,9,20231116
96,2,Lucas,11,Peter,7,20231116
97,3,Simon,11,Peter,0,20231116
98,4,Simon,12,Lucas,10,20231116
99,5,Lucas,11,Peter,8,20231116
100,6,Simon,11,Peter,5,20231116
101,7,Lucas,11,Simon,8,20231116
102,8,Lucas,11,Peter,9,20231116
103,9,Peter,11,Simon,8,20231116
104,10,Simon,11,Lucas,3,20231116
105,11,Lucas,11,Peter,3,20231116
106,12,Simon,11,Peter,9,20231116
107,13,Lucas,12,Simon,10,20231116
108,14,Lucas,11,Peter,9,20231116
109,1,Friedemann,13,Lucas,11,20231123
110,2,Simon,11,Peter,9,20231123
111,3,Lucas,11,Simon,5,20231123
112,4,Friedemann,11,Peter,3,20231123
113,5,Lucas,11,Peter,5,20231123
114,6,Friedemann,9,Simon,11,20231123
115,7,Friedemann,11,Lucas,6,20231123
116,8,Simon,11,Peter,7,20231123
117,9,Lucas,11,Simon,3,20231123
118,10,Friedemann,11,Peter,7,20231123
119,11,Friedemann,11,Simon,9,20231123
120,12,Lucas,11,Peter,4,20231123
121,13,Lucas,7,Peter,11,20231123
122,14,Simon,11,Friedemann,8,20231123
123,15,Friedemann,10,Lucas,12,20231123
124,16,Peter,5,Simon,11,20231123
125,17,Peter,7,Simon,11,20231123
126,18,Friedemann,11,Lucas,7,20231123
127,1,Friedemann,14,Lucas,12,20231130
128,2,Simon,11,Peter,2,20231130
129,3,Lucas,11,Peter,2,20231130
130,4,Friedemann,8,Simon,11,20231130
131,5,Lucas,11,Friedemann,7,20231130
132,6,Simon,11,Friedemann,5,20231130
133,7,Friedemann,7,Lucas,11,20231130
134,8,Lucas,11,Simon,7,20231130
135,9,Simon,11,Friedemann,1,20231130
136,10,Lucas,11,Simon,8,20231130
137,11,Simon,11,Friedemann,9,20231130
138,12,Lucas,8,Simon,11,20231130
139,13,Friedemann,11,Lucas,4,20231130
140,14,Friedemann,11,Simon,8,20231130
141,15,Friedemann,11,Simon,5,20231130
142,1,Simon,11,Peter,5,20231213
143,2,Lucas,11,Friedemann,4,20231213
144,3,Peter,5,Friedemann,11,20231213
145,4,Simon,12,Lucas,10,20231213
146,5,Simon,10,Friedemann,12,20231213
147,6,Peter,10,Lucas,12,20231213
148,7,Friedemann,12,Lucas,10,20231213
149,8,Simon,11,Peter,6,20231213
150,9,Simon,10,Lucas,12,20231213
151,10,Friedemann,11,Peter,3,20231213
152,11,Lucas,3,Peter,11,20231213
153,12,Simon,11,Friede,5,20231213
154,13,Simon,12,Friede,10,20231213
155,14,Friedemann,15,Lucas,17,20231213
156,15,Peter,1,Simon,11,20231213
157,16,Peter,8,Friedemann,11,20231213
158,17,Simon,11,Lucas,4,20231213
159,18,Friede,6,Simon,11,20231213
160,19,Lucas,11,Peter,6,20231213
161,20,Lucas,8,Friedemann,11,20231213
162,21,Friedemann,11,Simon,7,20231213
163,22,Peter,6,Friedemann,11,20231213
164,1,Lucas,11,Friede,9,20240103
165,2,Simon,10,Friede,12,20240103
166,3,Lucas,11,Simon,9,20240103
167,4,Lucas,8,Friede,11,20240103
168,5,Simon,8,Friede,11,20240103
169,6,Lucas,5,Simon,11,20240103
170,7,Friede,8,Lucas,11,20240103
171,8,Friede,11,Simon,6,20240103
172,9,Lucas,9,Simon,11,20240103
173,10,Lucas,11,Friede,7,20240103
174,11,Simon,11,Friede,8,20240103
175,12,Lucas,11,Simon,3,20240103
176,13,Lucas,11,Friede,9,20240103
177,14,Simon,11,Friede,8,20240103
178,15,Simon,11,Lucas,5,20240103
179,1,Peter,5,Simon,11,20240110
180,2,Friede,11,Lucas,8,20240110
181,3,Friede,6,Simon,11,20240110
182,4,Peter,8,Lucas,11,20240110
183,5,Simon,11,Lucas,9,20240110
184,6,Friede,11,Peter,6,20240110
185,7,Friede,11,Lucas,8,20240110
186,8,Simon,15,Peter,13,20240110
187,9,Lucas,2,Simon,11,20240110
188,10,Friede,11,Peter,1,20240110
189,11,Peter,9,Friede,11,20240110
190,12,Friede,8,Simon,11,20240110
191,13,Lucas,10,Simon,12,20240110
192,14,Lucas,11,Peter,5,20240110
193,15,Friede,9,Simon,11,20240110
194,16,Friede,11,Lucas,3,20240110
195,17,Simon,12,Lucas,10,20240110
196,18,Friede,9,Simon,11,20240110
197,19,Friede,11,Lucas,4,20240110
198,20,Simon,11,Lucas,7,20240110
199,21,Friede,2,Simon,11,20240110
200,1,Friede,9,Simon,11,20240116
201,2,Lucas,11,Peter,6,20240116
202,3,Friede,11,Lucas,3,20240116
203,4,Peter,3,Simon,11,20240116
204,5,Friede,11,Peter,3,20240116
205,6,Lucas,11,Simon,5,20240116
206,7,Friede,12,Simon,10,20240116
207,8,Lucas,11,Peter,4,20240116
208,9,Friede,11,Lucas,7,20240116
209,10,Simon,11,Peter,9,20240116
210,11,Friede,11,Peter,7,20240116
211,12,Lucas,7,Simon,11,20240116
212,13,Friede,7,Simon,11,20240116
213,14,Lucas,11,Peter,8,20240116
214,15,Friede,8,Lucas,11,20240116
215,16,Lucas,11,Simon,6,20240116
216,17,Friede,7,Simon,11,20240116
217,18,Friede,13,Lucas,11,20240116
218,19,Simon,11,Friede,8,20240116
219,20,Simon,11,Lucas,5,20240116
220,1,Lucas,11,Friedemann,9,20240203
221,2,Simon,10,Friedemann,12,20240203
222,3,Lucas,11,Simon,9,20240203
223,4,Lucas,8,Friedemann,11,20240203
224,5,Simon,8,Friedemann,11,20240203
225,6,Lucas,5,Simon,11,20240203
226,7,Friedemann,8,Lucas,11,20240203
227,8,Friedemann,11,Simon,6,20240203
228,9,Lucas,9,Simon,11,20240203
229,10,Lucas,11,Friedemann,7,20240203
230,11,Simon,11,Friedemann,8,20240203
231,12,Lucas,11,Simon,3,20240203
232,13,Lucas,11,Friedemann,9,20240203
233,14,Simon,11,Friedemann,8,20240203
234,15,Simon,11,Lucas,5,20240203
235,1,Lucas,11,Friedemann,8,20240426
236,2,Simon,14,Friedemann,12,20240426
237,3,Simon,11,Lucas,5,20240426
238,4,Friedemann,11,Lucas,9,20240426
239,5,Friedemann,11,Simon,9,20240426
240,6,Simon,11,Lucas,7,20240426
241,7,Friedemann,13,Lucas,11,20240426
242,8,Simon,11,Friedemann,6,20240426
243,9,Lucas,11,Simon,7,20240426
244,10,Lucas,7,Friedemann,11,20240426
245,11,Friedemann,16,Simon,14,20240426
246,12,Simon,11,Lucas,8,20240426
247,13,Friedemann,10,Lucas,12,20240426
248,14,Simon,5,Friedemann,11,20240426
249,1,Friedemann,12,Lucas,10,20240620
250,2,Friedemann,9,Simon,11,20240620
251,3,Lucas,9,Simon,11,20240620
252,4,Friedemann,11,Lucas,8,20240620
253,5,Friedemann,11,Simon,2,20240620
254,6,Friedemann,5,Lucas,11,20240620
255,7,Lucas,11,Simon,8,20240620
256,8,Friedemann,6,Simon,11,20240620
257,9,Lucas,12,Simon,10,20240620
258,10,Lucas,11,Friedemann,7,20240620
259,11,Friedemann,11,Simon,8,20240620
260,12,Lucas,6,Simon,11,20240620
261,13,Lucas,6,Friedemann,11,20240620
262,14,Friedemann,5,Simon,11,20240620
263,1,Lucas,12,Friedemann,10,20240711
264,2,Friedemann,11,Simon,6,20240711
265,3,Simon,11,Lucas,8,20240711
266,4,Friedemann,6,Lucas,11,20240711
267,5,Simon,11,Friedemann,5,20240711
268,6,Simon,11,Lucas,9,20240711
269,7,Friedemann,11,Lucas,9,20240711
270,8,Friedemann,11,Simon,8,20240711
271,9,Simon,11,Lucas,7,20240711
272,10,Friedemann,8,Lucas,11,20240711
273,11,Simon,11,Friedemann,8,20240711
274,1,Lucas,11,Friedemann,9,20240718
275,2,Lucas,11,Friedemann,4,20240718
276,3,Lucas,11,Friedemann,4,20240718
277,4,Simon,12,Friedemann,10,20240718
278,5,Simon,11,Lucas,7,20240718
279,6,Friedemann,11,Lucas,6,20240718
280,7,Simon,11,Friedemann,8,20240718
281,8,Simon,11,Lucas,9,20240718
282,9,Lucas,11,Friedemann,6,20240718
283,10,Simon,11,Friedemann,8,20240718
284,11,Lucas,11,Simon,1,20240718
285,1,Lucas,12,Friedemann,10,20241201
286,2,Lucas,11,Simon,9,20241201
287,3,Simon,11,Friedemann,6,20241201
288,4,Simon,11,Lucas,7,20241201
289,5,Simon,11,Friedemann,7,20241201
290,6,Lucas,8,Friedemann,11,20241201
291,7,Lucas,9,Friedemann,11,20241201
292,8,Simon,11,Lucas,6,20241201
293,9,Friedemann,15,Simon,13,20241201
294,1,Lucas,11,Simon,7,20241205
295,2,Simon,11,Friedemann,6,20241205
296,3,Lucas,11,Friedemann,7,20241205
297,4,Lucas,3,Simon,11,20241205
298,5,Friedemann,8,Simon,11,20241205
299,6,Lucas,9,Friedemann,11,20241205
300,7,Simon,11,Lucas,8,20241205
301,8,Simon,11,Friedemann,7,20241205
302,9,Lucas,11,Friedemann,6,20241205
303,10,Lucas,13,Simon,11,20241205
304,11,Friedemann,4,Simon,11,20241205
305,12,Lucas,11,Friedemann,8,20241205
306,13,Simon,11,Lucas,4,20241205
307,14,Simon,10,Friedemann,12,20241205
308,15,Lucas,6,Friedemann,11,20241205
309,16,Simon,11,Friedemann,8,20241205
310,1,Simon,12,Lucas,10,20241212
311,2,Simon,9,Lucas,11,20241212
312,3,Simon,11,Lucas,2,20241212
313,4,Simon,11,Lucas,5,20241212
314,5,Simon,11,Friedemann,4,20241212
315,6,Lucas,11,Friedemann,9,20241212
316,7,Simon,11,Friedemann,7,20241212
317,8,Lucas,9,Friedemann,11,20241212
318,9,Simon,11,Friedemann,9,20241212
319,10,Simon,11,Lucas,5,20241212
320,11,Lucas,11,Friedemann,8,20241212
321,12,Simon,11,Friedemann,8,20241212
322,13,Simon,7,Lucas,11,20241212
323,14,Friedemann,12,Lucas,10,20241212
324,15,Friedemann,11,Simon,4,20241212
"""
df = pd.read_csv(pd.StringIO(sample_data))

# Ensure date column is cast as datetime
df['date'] = pd.to_datetime(df['date'], format="%Y%m%d", errors='coerce')

# ----- BASIC CLEANUP -----
# Sometimes, multiple names or typos appear for the same person (like "Friede" vs "Friedemann").
# You can do some basic unify logic if needed:
# Example: unify "Friede" into "Friedemann"
df['Player1'] = df['Player1'].replace("Friede", "Friedemann")
df['Player2'] = df['Player2'].replace("Friede", "Friedemann")

# ----- ADD COLUMNS FOR WINNER/LOSER -----
def find_winner(row):
    return row['Player1'] if row['Score1'] > row['Score2'] else row['Player2']

def find_loser(row):
    return row['Player2'] if row['Score1'] > row['Score2'] else row['Player1']

df['Winner'] = df.apply(find_winner, axis=1)
df['Loser'] = df.apply(find_loser, axis=1)
df['WinnerScore'] = df[['Score1','Score2']].max(axis=1)
df['LoserScore'] = df[['Score1','Score2']].min(axis=1)
df['PointDiff'] = df['WinnerScore'] - df['LoserScore']

# ----- SIDEBAR OPTIONS -----
st.sidebar.header("Filters")
all_players = sorted(list(set(df['Player1']).union(set(df['Player2']))))
selected_players = st.sidebar.multiselect("Filter by Player(s)", all_players, default=all_players)

# Filter the DataFrame by selected players (only keep matches where at least one selected player took part)
df_filtered = df[(df['Player1'].isin(selected_players)) | (df['Player2'].isin(selected_players))]

# ----- KEY METRICS -----
st.subheader("Key Performance Metrics")
col1, col2, col3 = st.columns(3)

total_matches = len(df_filtered)
total_players_in_view = len(selected_players)
total_unique_players = df_filtered[['Player1','Player2']].stack().nunique()

col1.metric("Total Matches in View", total_matches)
col2.metric("Players Selected", total_players_in_view)
col3.metric("Unique Players in Filtered Data", total_unique_players)

# ----- WINS & POINTS PER PLAYER -----
st.subheader("Overall Wins & Total Points per Player")

# Total Wins
wins_df = df_filtered.groupby('Winner').size().reset_index(name='Wins')

# Total Points Scored
# We'll sum up points from either Score1 or Score2. A quick way is to group
# by Player1 summing Score1 plus group by Player2 summing Score2, then merge.
points_p1 = df_filtered.groupby('Player1')['Score1'].sum().reset_index()
points_p1.columns = ['Player', 'Points']
points_p2 = df_filtered.groupby('Player2')['Score2'].sum().reset_index()
points_p2.columns = ['Player', 'Points']
total_points = pd.concat([points_p1, points_p2], ignore_index=True)
total_points = total_points.groupby('Player')['Points'].sum().reset_index()

# Merge the two metrics
summary_df = pd.merge(wins_df, total_points, left_on='Winner', right_on='Player', how='outer').drop(columns='Player')
summary_df.rename(columns={'Winner': 'Player'}, inplace=True)

# Some players may have never won but still appear in total_points, so let's combine carefully
# We'll do a full outer merge of (Wins table) and (Points table) to ensure nobody is lost:
# We already did it, but let's finalize it properly:
# If someone doesn't appear in 'Winner', then 'Wins' is NaN => fill with 0
summary_df['Wins'] = summary_df['Wins'].fillna(0).astype(int)

# Now check if there are players in total_points who never appear as winners. 
# Actually, the code above should handle that. If we still need them, we handle them. 
# But let's see if the final summary covers all players. 
# We do an outer join with total_points again to ensure coverage:
final_summary = pd.merge(
    total_points, 
    summary_df[['Player','Wins']], 
    on='Player', how='outer'
)
final_summary['Wins'] = final_summary['Wins'].fillna(0).astype(int)

# Sort by Wins desc
final_summary.sort_values(by='Wins', ascending=False, inplace=True)
final_summary.reset_index(drop=True, inplace=True)

# Display in Streamlit
st.dataframe(final_summary.style.format({"Points": "{:.0f}", "Wins": "{:.0f}"}), use_container_width=True)

# ----- HEAD-TO-HEAD MATCHUPS -----
st.subheader("Head-to-Head Matchups")
st.markdown("See how players perform against each other (win count).")

# We can create a pivot table counting how many times a player has beaten another
h2h_df = df_filtered.groupby(['Winner','Loser']).size().reset_index(name='Wins_against')
pivot_h2h = h2h_df.pivot(index='Winner', columns='Loser', values='Wins_against').fillna(0)

st.dataframe(pivot_h2h.astype(int), use_container_width=True)

# ----- DOMINATION METRICS -----
st.subheader("Domination Metrics")
st.markdown("**Average Margin of Victory** (among the selected filters).")

domination = df_filtered.groupby('Winner')['PointDiff'].mean().reset_index()
domination.columns = ['Player','Avg_Point_Diff']
domination.sort_values(by='Avg_Point_Diff', ascending=False, inplace=True)

st.dataframe(domination.style.format({"Avg_Point_Diff": "{:.2f}"}), use_container_width=True)

# ----- TIME-SERIES VIEW -----
st.subheader("Matches Over Time")
st.markdown("Number of matches played on each date (filtered by player selection).")

matches_over_time = df_filtered.groupby('date').size().reset_index(name='Matches')
c = alt.Chart(matches_over_time).mark_bar().encode(
    x='date:T',
    y='Matches:Q',
    tooltip=['date:T','Matches:Q']
).properties(
    width='container',
    height=300
)
st.altair_chart(c, use_container_width=True)

st.markdown("---")
st.markdown("""
**Ideas to extend**:
- Show longest winning streak per player
- Show best comeback (lowest to highest final difference)
- Show distribution of scores (histogram of all match point totals)
- More advanced visualizations!
""")
